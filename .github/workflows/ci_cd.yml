name: CI/CD

on:
  push:
    branches: [ main_, develop ]
  pull_request:
    branches: [ main_, develop ]
  workflow_dispatch:

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install Ruff
        run: |
          python -m pip install --upgrade pip
          pip install ruff
      - name: Run Ruff
        run: ruff check --output-format=github src/

  test:
    name: Run Tests
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip poetry
          poetry config virtualenvs.create false --local
          poetry install --no-root
          pip install openai==1.55.3 httpx==0.27.2 --force-reinstall
      - name: Build the test BD
        run: docker compose -f docker-compose-test.yml up -d
      - name: Run tests
        run: pytest tests

  deploy:
    name: Deploy to VM
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main_'    # деплой только с main
    steps:
      - uses: actions/checkout@v4

      - name: Create .env file from secret
        run: echo "${{ secrets.ENV_PROD }}" > .env

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/private_key
          chmod 600 ~/.ssh/private_key
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/private_key

      - name: Test SSH connection
        run: |
          ssh -i ~/.ssh/private_key -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo 'SSH connection successful'"

      - name: Copy deployment files to server
        run: |
          scp -i ~/.ssh/private_key -o StrictHostKeyChecking=no .env ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/AirportDirectory/

      - name: SSH into server and deploy
        run: |
          ssh -i ~/.ssh/private_key -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            cd /home/${{ secrets.SSH_USER }}/AirportDirectory/

            # Авторизация в Docker Hub
            echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

            docker compose down || true
            git pull origin main
            docker compose pull
            docker compose up -d --build
          EOF

      - name: Clean up
        run: rm -f private_key .env
