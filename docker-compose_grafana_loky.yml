services:
  db_air:
    container_name: db_container
    image: postgis/postgis:16-3.5
    volumes:
      - postgres_volume:/var/lib/postgresql/data/
    ports:
      - 5432:5432
    restart: always
    env_file:
      - .env
    networks:
      - net

  redis_app:
    image: redis
    command: --port 6379
    expose:
      - 6379
    restart: always
    networks:
      - net

  app:
    build:
      dockerfile: ./Dockerfile
    container_name: app
    command: gunicorn src.main:app --workers 2 --worker-class uvicorn.workers.UvicornWorker --bind=0.0.0.0:8000 --forwarded-allow-ips="*"
    expose:
      - 8000
    ports:
      - 8000:8000
    logging:
      driver: json-file
      options:
        tag: "{{.ImageName}}|{{.Name}}|{{.ImageFullID}}|{{.FullID}}"
    restart: always
    env_file:
      - .env
    volumes:
      - .:/app
      - ./data:/app/data
    depends_on:
      - db_air
      - redis_app
    networks:
      - net

  nginx:
    build: ./nginx
    container_name: nginx
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    volumes:
      - ./var/log/nginx:/var/log/nginx
      - ./static:/usr/share/nginx/html/static
      - ./nginx/ssl/live/airportcards.ru:/etc/nginx/ssl:ro
      - ./nginx/well-known:/usr/share/nginx/html/.well-known/acme-challenge
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    ports:
      - 80:80
      - 443:443
    depends_on:
      - app
    networks:
      - net

  celery:
    build:
      context: .
    env_file:
      - .env
    container_name: celery_app
    command: [ "/app/docker/celery.sh", "celery" ] # запуск скрипта для запуска celery
    depends_on:
      - redis_app
    networks:
      - net

  flower:
    build:
      context: .
    env_file:
      - .env
    container_name: flower_app
    command: [ "/app/docker/celery.sh", "flower" ]  # запуск скрипта для запуска flower
    depends_on:
      - redis_app
      - celery
    ports:
      - 5555:5555
    networks:
      - net

  loki:
    image: grafana/loki:latest
    container_name: loki
    environment:
      TZ: ${SYSTEM_TIMEZONE:-Europe/Moscow}
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
    networks:
      - net

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheusdata:/prometheus
    networks:
      - net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - TZ=${SYSTEM_TIMEZONE:-Europe/Moscow}
    volumes:
      - ./grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - grafanadata:/var/lib/grafana
    restart: unless-stopped
    depends_on:
      - prometheus
      - loki
    networks:
      - net

volumes:
  postgres_volume:
  data:
  grafanadata:
  prometheusdata:

networks:
  net:
    driver: bridge
