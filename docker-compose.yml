x-def-logging: &default-logging
  logging:
    driver: loki
    options:
      loki-url: http://host.docker.internal:3100/loki/api/v1/push
      loki-batch-size: 100
      loki-retries: 2
      loki-max-backoff: 1000ms
      loki-timeout: 1s

services:
  db_air:
    container_name: db_container
    image: postgis/postgis:16-3.5
    volumes:
      - postgres_volume:/var/lib/postgresql/data/
    ports:
      - 5432:5432
    restart: always
    env_file:
      - .env
    networks:
      - net

  redis_app:
    image: redis
    command: --port 6379
    expose:
      - 6379
    restart: always
    networks:
      - net

  app:
    build:
      dockerfile: ./Dockerfile
    command: [ "/app/docker/app.sh" ]
    expose:
      - 8000
    ports:
      - 8000:8000
    restart: always
    <<: *default-logging
    env_file:
      - .env
    volumes:
      - .:/app
      - ./data:/app/data
    depends_on:
      - db_air
      - redis_app
    networks:
      - net

  loki:
    image: grafana/loki:latest
    environment:
      TZ: ${SYSTEM_TIMEZONE:-Europe/Moscow}
    ports:
      - 3100:3100
    command: -config.file=/etc/loki/local-config.yaml

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - TZ=${SYSTEM_TIMEZONE:-Europe/Moscow}
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    ports:
      - 3000:3000

  nginx:
    build: ./nginx
    container_name: nginx
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"
    volumes:
      - ./var/log/nginx:/var/log/nginx
      - ./static:/usr/share/nginx/html/static
      - ./nginx/ssl/live/airportcards.ru:/etc/nginx/ssl:ro
      - ./nginx/well-known:/usr/share/nginx/html/.well-known/acme-challenge
    ports:
      - 80:80
      - 443:443
    depends_on:
      - app
    networks:
      - net

  celery:
    build:
      context: .
    env_file:
      - .env
    container_name: celery_app
    command: [ "/app/docker/celery.sh", "celery" ] # запуск скрипта для запуска celery
    depends_on:
      - redis_app
    networks:
      - net

  flower:
    build:
      context: .
    env_file:
      - .env
    container_name: flower_app
    command: [ "/app/docker/celery.sh", "flower" ]  # запуск скрипта для запуска flower
    depends_on:
      - redis_app
      - celery
    ports:
      - 5555:5555
    networks:
      - net

volumes:
  postgres_volume:
  data:

networks:
  net:
    driver: bridge
